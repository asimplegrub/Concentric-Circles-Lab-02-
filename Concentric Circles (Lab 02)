size(400, 800);
background(255);
colorMode(RGB, 255,255,255);
noStroke();


//Code for Task01: Blue --> Orange Circles
final color BLUE = color(0,0,255);
final color ORANGE = color(255,128,0);

ellipseMode(CENTER);

final int baseDiameterTask01 = 25;
fill(BLUE);

float firstTask01CenterX = 0 + (float)baseDiameterTask01/2; //position of the first circle
//12.5
float lastTask01CenterX = width - (float)baseDiameterTask01/2; //position of the last circle
float allTask01CenterY = 100; //defines where each circle is on the Y axis (this nuumber doesn't change in this program)

int numCirclesTask01 = 10;
int numCircleTask01MinusOne = numCirclesTask01-1; //this is to make some math of what we are doing work well

for (int i=0; i<=numCircleTask01MinusOne; i++) {
  float percentAcross = (float)i/numCircleTask01MinusOne;
  float thisCircleCenterX = lerp(firstTask01CenterX, lastTask01CenterX, percentAcross); //defines where each circle is on the X axis
  //lerp = linear interpolation
  //lerp(min, max, the value to interpolate); 
  //float thisCircleCenterX = lerp(12.5, (400-12.5), 0); 1st time through the loop (because the first time, i=0)
  //float thisCircleCenterX = lerp(12.5, (400-12.5), 1/9); 2nd time we go through the loop, i=1: 1/9 away from 12.5 (which is the first circle) along a line that runs from 12.5 to (400-12.5)
  //float thisCircleCenterX = lerp(12.5, (400-12.5), 2/9); 3rd time...
 
  fill(lerpColor(BLUE, ORANGE, percentAcross)); //blue-->orange gradient on first row
  ellipse(thisCircleCenterX, allTask01CenterY, baseDiameterTask01, baseDiameterTask01); //draws the first row of circles
  //ellipse(thisCircleCenterX, 100, 25, 25);
  //ellipse(x,y, w,h);
}


//Code for Task 02: Concentric Rings w/color
colorMode(HSB,360,100,100);

final int sizeFactor = 25;

float allTask02CenterX = width/2; //the center, (200,0) is the width divided by 2
float allTask02CenterY = 400;

int startingFactor = width/sizeFactor; // 400/25=16 --> 16 circles //Calculate the biggest we can draw first, and then we will stack the smaller ones later and still see them. 
int currentMultiple = startingFactor; //=16

final color RED = color(360,100,100);
fill(RED);

while (sizeFactor*currentMultiple > 0) { //this loop draws the concentric circles
  print(sizeFactor*currentMultiple);
  print("*");
  //float XpercentAcross = (float)currentMultiple/16;
  //fill(lerpColor(BLUE, ORANGE, XpercentAcross));
  ellipse(allTask02CenterX, allTask02CenterY, sizeFactor*currentMultiple, sizeFactor*currentMultiple);
  currentMultiple--;
  float m = map(currentMultiple, 0, 16, 0, 360); //maps the current multiple from the range of 0 to 16 onto the range of 0 to 360
  fill(m,100,100); //this function changes the colors
};


//Code for Task 03: Triangle Linear Interpolation
stroke(0);
fill(color(280,100,100));

//triangle(x1,y1, x2,y2, x3,y3);
final int firstTB = 40; //first triangle's Base Length
final int lastTB = 150; //last triangle's Base Length
final int firstTH = 20; //first triangle's Height
final int lastTH = 75; //last triangle's Height
float firstTx2 = 0; //first triangle's x2 value (in (x2,y2)) 
float lastTx2 = width - lastTB; //last triangle's x2 value (in (x2,y2)) 
float allTy1 = 670; //all the triangles' y1 value in (x1,y1)

int numTriangles = 20;
int numTrianglesMinusOne = numTriangles-1;

for (int i=0; i<=numTrianglesMinusOne; i++) {
  float thisTB = lerp(firstTB, lastTB, (float)i/numTrianglesMinusOne); //determines an interpolated triangle's base length
  float thisTH = lerp(firstTH, lastTH, (float)i/numTrianglesMinusOne); //determines an interpolated triangle's height
  float thisTx2 = lerp(firstTx2, lastTx2, (float)i/numTrianglesMinusOne); //determines an interpolated triangle's x2 value in (x2,y2)
  float m = map(i, 0, numTrianglesMinusOne, 280, 53); //maps the current multiple from the range of 0 to 16 onto the range of 0 to 360
  fill(m,100,100); //this function changes the colors
  triangle(thisTx2+thisTB/2,allTy1, thisTx2,allTy1+thisTH, thisTx2+thisTB,allTy1+thisTH);
}
